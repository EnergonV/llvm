// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Conversion expressions ] ==============================================
//
// References:
//    http://llvm.org/docs/LangRef.html#conversion-operations

package ast

// --- [ trunc ] ---------------------------------------------------------------

// ExprTrunc represents a truncation expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#trunc-instruction
type ExprTrunc struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ zext ] ----------------------------------------------------------------

// ExprZExt represents a zero extension expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#zext-instruction
type ExprZExt struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ sext ] ----------------------------------------------------------------

// ExprSExt represents a sign extension expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#sext-instruction
type ExprSExt struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ fptrunc ] -------------------------------------------------------------

// ExprFPTrunc represents a floating-point truncation expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptrunc-instruction
type ExprFPTrunc struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ fpext ] ---------------------------------------------------------------

// ExprFPExt represents a floating-point extension expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fpext-instruction
type ExprFPExt struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ fptoui ] --------------------------------------------------------------

// ExprFPToUI represents a floating-point to unsigned integer conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptoui-instruction
type ExprFPToUI struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ fptosi ] --------------------------------------------------------------

// ExprFPToSI represents a floating-point to signed integer conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptosi-instruction
type ExprFPToSI struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ uitofp ] --------------------------------------------------------------

// ExprUIToFP represents an unsigned integer to floating-point conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#uitofp-instruction
type ExprUIToFP struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ sitofp ] --------------------------------------------------------------

// ExprSIToFP represents a signed integer to floating-point conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#sitofp-instruction
type ExprSIToFP struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ ptrtoint ] ------------------------------------------------------------

// ExprPtrToInt represents a pointer to integer conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#ptrtoint-instruction
type ExprPtrToInt struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ inttoptr ] ------------------------------------------------------------

// ExprIntToPtr represents an integer to pointer conversion expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#inttoptr-instruction
type ExprIntToPtr struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ bitcast ] -------------------------------------------------------------

// ExprBitCast represents a bitcast expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#bitcast-instruction
type ExprBitCast struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}

// --- [ addrspacecast ] -------------------------------------------------------

// ExprAddrSpaceCast represents an address space cast expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#addrspacecast-instruction
type ExprAddrSpaceCast struct {
	// Constant before conversion.
	From Constant
	// Type after conversion.
	To Type
}
