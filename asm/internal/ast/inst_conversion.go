// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Conversion instructions ] =============================================
//
// References:
//    http://llvm.org/docs/LangRef.html#conversion-operations

package ast

// --- [ trunc ] ---------------------------------------------------------------

// InstTrunc represents a truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#trunc-instruction
type InstTrunc struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstTrunc) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstTrunc) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstTrunc) isInst() {}

// --- [ zext ] ----------------------------------------------------------------

// InstZExt represents a zero extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#zext-instruction
type InstZExt struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstZExt) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstZExt) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstZExt) isInst() {}

// --- [ sext ] ----------------------------------------------------------------

// InstSExt represents a sign extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sext-instruction
type InstSExt struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstSExt) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstSExt) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstSExt) isInst() {}

// --- [ fptrunc ] -------------------------------------------------------------

// InstFPTrunc represents a floating-point truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptrunc-instruction
type InstFPTrunc struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFPTrunc) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFPTrunc) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFPTrunc) isInst() {}

// --- [ fpext ] ---------------------------------------------------------------

// InstFPExt represents a floating-point extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fpext-instruction
type InstFPExt struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFPExt) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFPExt) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFPExt) isInst() {}

// --- [ fptoui ] --------------------------------------------------------------

// InstFPToUI represents a floating-point to unsigned integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptoui-instruction
type InstFPToUI struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFPToUI) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFPToUI) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFPToUI) isInst() {}

// --- [ fptosi ] --------------------------------------------------------------

// InstFPToSI represents a floating-point to signed integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptosi-instruction
type InstFPToSI struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFPToSI) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFPToSI) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFPToSI) isInst() {}

// --- [ uitofp ] --------------------------------------------------------------

// InstUIToFP represents an unsigned integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#uitofp-instruction
type InstUIToFP struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstUIToFP) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstUIToFP) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstUIToFP) isInst() {}

// --- [ sitofp ] --------------------------------------------------------------

// InstSIToFP represents a signed integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sitofp-instruction
type InstSIToFP struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstSIToFP) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstSIToFP) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstSIToFP) isInst() {}

// --- [ ptrtoint ] ------------------------------------------------------------

// InstPtrToInt represents a pointer to integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ptrtoint-instruction
type InstPtrToInt struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstPtrToInt) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstPtrToInt) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstPtrToInt) isInst() {}

// --- [ inttoptr ] ------------------------------------------------------------

// InstIntToPtr represents an integer to pointer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#inttoptr-instruction
type InstIntToPtr struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstIntToPtr) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstIntToPtr) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstIntToPtr) isInst() {}

// --- [ bitcast ] -------------------------------------------------------------

// InstBitCast represents a bitcast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#bitcast-instruction
type InstBitCast struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstBitCast) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstBitCast) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstBitCast) isInst() {}

// --- [ addrspacecast ] -------------------------------------------------------

// InstAddrSpaceCast represents an address space cast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#addrspacecast-instruction
type InstAddrSpaceCast struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Value before conversion.
	From Value
	// Type after conversion.
	To Type
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstAddrSpaceCast) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstAddrSpaceCast) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstAddrSpaceCast) isInst() {}
