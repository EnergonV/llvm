// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Binary expressions ] ==================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#binary-operations

package ast

// --- [ add ] -----------------------------------------------------------------

// ExprAdd represents an addition expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#add-instruction
type ExprAdd struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprAdd) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprAdd) isConstExpr() {}

// --- [ fadd ] ----------------------------------------------------------------

// ExprFAdd represents a floating-point addition expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fadd-instruction
type ExprFAdd struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprFAdd) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprFAdd) isConstExpr() {}

// --- [ sub ] -----------------------------------------------------------------

// ExprSub represents a subtraction expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#sub-instruction
type ExprSub struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprSub) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprSub) isConstExpr() {}

// --- [ fsub ] ----------------------------------------------------------------

// ExprFSub represents a floating-point subtraction expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fsub-instruction
type ExprFSub struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprFSub) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprFSub) isConstExpr() {}

// --- [ mul ] -----------------------------------------------------------------

// ExprMul represents a multiplication expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#mul-instruction
type ExprMul struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprMul) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprMul) isConstExpr() {}

// --- [ fmul ] ----------------------------------------------------------------

// ExprFMul represents a floating-point multiplication expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fmul-instruction
type ExprFMul struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprFMul) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprFMul) isConstExpr() {}

// --- [ udiv ] ----------------------------------------------------------------

// ExprUDiv represents an unsigned division expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#udiv-instruction
type ExprUDiv struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprUDiv) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprUDiv) isConstExpr() {}

// --- [ sdiv ] ----------------------------------------------------------------

// ExprSDiv represents a signed division expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#sdiv-instruction
type ExprSDiv struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprSDiv) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprSDiv) isConstExpr() {}

// --- [ fdiv ] ----------------------------------------------------------------

// ExprFDiv represents a floating-point division expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#fdiv-instruction
type ExprFDiv struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprFDiv) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprFDiv) isConstExpr() {}

// --- [ urem ] ----------------------------------------------------------------

// ExprURem represents an unsigned remainder expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#urem-instruction
type ExprURem struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprURem) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprURem) isConstExpr() {}

// --- [ srem ] ----------------------------------------------------------------

// ExprSRem represents a signed remainder expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#srem-instruction
type ExprSRem struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprSRem) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprSRem) isConstExpr() {}

// --- [ frem ] ----------------------------------------------------------------

// ExprFRem represents a floating-point remainder expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#frem-instruction
type ExprFRem struct {
	// Operands.
	X, Y Constant
}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprFRem) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprFRem) isConstExpr() {}
