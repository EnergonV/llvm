// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Binary instructions ] =================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#binary-operations

package ast

// --- [ add ] -----------------------------------------------------------------

// InstAdd represents an addition instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#add-instruction
type InstAdd struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstAdd) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstAdd) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstAdd) isInst() {}

// --- [ fadd ] ----------------------------------------------------------------

// InstFAdd represents a floating-point addition instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fadd-instruction
type InstFAdd struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFAdd) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFAdd) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFAdd) isInst() {}

// --- [ sub ] -----------------------------------------------------------------

// InstSub represents a subtraction instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sub-instruction
type InstSub struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstSub) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstSub) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstSub) isInst() {}

// --- [ fsub ] ----------------------------------------------------------------

// InstFSub represents a floating-point subtraction instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fsub-instruction
type InstFSub struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFSub) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFSub) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFSub) isInst() {}

// --- [ mul ] -----------------------------------------------------------------

// InstMul represents a multiplication instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#mul-instruction
type InstMul struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstMul) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstMul) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstMul) isInst() {}

// --- [ fmul ] ----------------------------------------------------------------

// InstFMul represents a floating-point multiplication instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fmul-instruction
type InstFMul struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFMul) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFMul) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFMul) isInst() {}

// --- [ udiv ] ----------------------------------------------------------------

// InstUDiv represents an unsigned division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#udiv-instruction
type InstUDiv struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstUDiv) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstUDiv) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstUDiv) isInst() {}

// --- [ sdiv ] ----------------------------------------------------------------

// InstSDiv represents a signed division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sdiv-instruction
type InstSDiv struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstSDiv) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstSDiv) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstSDiv) isInst() {}

// --- [ fdiv ] ----------------------------------------------------------------

// InstFDiv represents a floating-point division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fdiv-instruction
type InstFDiv struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFDiv) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFDiv) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFDiv) isInst() {}

// --- [ urem ] ----------------------------------------------------------------

// InstURem represents an unsigned remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#urem-instruction
type InstURem struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstURem) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstURem) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstURem) isInst() {}

// --- [ srem ] ----------------------------------------------------------------

// InstSRem represents a signed remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#srem-instruction
type InstSRem struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstSRem) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstSRem) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstSRem) isInst() {}

// --- [ frem ] ----------------------------------------------------------------

// InstFRem represents a floating-point remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#frem-instruction
type InstFRem struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Type of the instruction.
	Type Type
	// Operands.
	X, Y Value
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstFRem) isValue() {}

// isNamedValue ensures that only named values can be assigned to the
// ast.NamedValue interface.
func (*InstFRem) isNamedValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstFRem) isInst() {}
