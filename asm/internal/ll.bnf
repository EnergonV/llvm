// ### [ Lexical part ] ########################################################

_ascii_letter
	: 'A' - 'Z'
	| 'a' - 'z'
;

_letter
	: _ascii_letter
	| '$'
	| '-'
	| '.'
	| '_'
;

_decimal_digit
	: '0' - '9'
;

!comment : ';' { . } '\n' ;

!whitespace : '\x00' | ' ' | '\t' | '\r' | '\n' ;

// === [ Identifiers ] =========================================================

_name
	: _letter { _letter | _decimal_digit }
;

_quoted_name
	: _quoted_string
;

_id
	: _decimals
;

// --- [ Global identifiers ] --------------------------------------------------

global_ident
	: _global_name
	| _global_id
;

_global_name
	: '@' ( _name | _quoted_name )
;

_global_id
	: '@' _id
;

// --- [ Local identifiers ] ---------------------------------------------------

local_ident
	: _local_name
	| _local_id
;

_local_name
	: '%' ( _name | _quoted_name )
;

_local_id
	: '%' _id
;

// --- [ Labels ] --------------------------------------------------------------

label_ident
	: ( _letter | _decimal_digit ) { _letter | _decimal_digit } ':'
	| _quoted_string ':'
;

// === [ Integer literals ] ====================================================

int_lit
	: _decimal_lit
;

_decimal_lit
	: [ '-' ] _decimals
;

_decimals
	: _decimal_digit { _decimal_digit }
;

// === [ String literals ] =====================================================

_quoted_string
	: '"' { . } '"'
;

// === [ Types ] ===============================================================

int_type
	: 'i' _decimals
;

// ### [ Syntactic part ] ######################################################

<< import (
	"github.com/llir/llvm/asm/internal/irx"
	"github.com/llir/llvm/ir"
	"github.com/llir/llvm/ir/types"
) >>

// === [ Modules ] =============================================================

Module
	: TopLevelDecls   << irx.NewModule($0) >>
;

TopLevelDecls
	: empty
	| TopLevelDeclList
;

TopLevelDeclList
	: TopLevelDecl                    << irx.NewTopLevelDeclList($0) >>
	| TopLevelDeclList TopLevelDecl   << irx.AppendTopLevelDecl($0, $1) >>
;

TopLevelDecl
	: Global
	| FunctionDecl
	| FunctionDef
;

// === [ Global variables ] ====================================================

Global
	: GlobalIdent "=" "external" Immutable Type   << irx.NewGlobalDecl($0, $3, $4) >>
	| GlobalIdent "=" Immutable Type Constant     << irx.NewGlobalDef($0, $2, $3, $4) >>
;

Immutable
	: "constant"   << true, nil >>
	| "global"     << false, nil >>
;

// === [ Functions ] ===========================================================

FunctionDecl
	: "declare" FunctionHeader   << $1, nil >>
;

FunctionDef
	: "define" FunctionHeader FunctionBody   << irx.NewFunctionDef($1, $2) >>
;

FunctionHeader
	: ResultType GlobalIdent "(" Params ")"   << irx.NewFunctionDecl($0, $1, $3) >>
;

Params
	: empty
	| "..."                 << irx.NewParams(nil, true) >>
	| ParamList             << irx.NewParams($0, false) >>
	| ParamList "," "..."   << irx.NewParams($0, true) >>
;

ParamList
	: Param                 << irx.NewParamList($0) >>
	| ParamList "," Param   << irx.AppendParam($0, $2) >>
;

Param
	: Type              << irx.NewParam($0, nil) >>
	| Type LocalIdent   << irx.NewParam($0, $1) >>
;

FunctionBody
	: "{" BasicBlocks "}"   << $1, nil >>
;

// === [ Identifiers ] =========================================================

GlobalIdent
	: global_ident   << irx.NewGlobalIdent($0) >>
;

LocalIdent
	: local_ident   << irx.NewLocalIdent($0) >>
;

LabelIdent
	: label_ident   << irx.NewLabelIdent($0) >>
;

// === [ Types ] ===============================================================

Type
	: IntType
	| PointerType
;

ResultType
	: VoidType
	| Type
;

VoidType
	: "void"   << types.Void, nil >>
;

IntType
	: int_type   << irx.NewIntType($0) >>
;

PointerType
	: Type "*"   << irx.NewPointerType($0) >>
;

// === [ Values ] ==============================================================

Value
	: LocalIdent
	| GlobalIdent
	| Constant
;

// === [ Constants ] ===========================================================

Constant
	: int_lit   << irx.NewIntLit($0) >>
;

// === [ Basic blocks ] ========================================================

BasicBlocks
	: empty
	| BasicBlockList
;

BasicBlockList
	: BasicBlock                  << irx.NewBasicBlockList($0) >>
	| BasicBlockList BasicBlock   << irx.AppendBasicBlock($0, $1) >>
;

BasicBlock
	: Instructions Terminator              << irx.NewBasicBlock(nil, $0, $1) >>
	| LabelIdent Instructions Terminator   << irx.NewBasicBlock($0, $1, $2) >>
;

// === [ Instructions ] ========================================================

Instructions
	: empty
	| InstructionList
;

InstructionList
	: Instruction                   << irx.NewInstructionList($0) >>
	| InstructionList Instruction   << irx.AppendInstruction($0, $1) >>
;

Instruction
	: StoreInst
	| LocalIdent "=" ValueInstruction   << irx.NewNamedInstruction($0, $2) >>
	| ValueInstruction
;

ValueInstruction
	: AddInst
	| MulInst
	| LoadInst
	| CallInst
;

// --- [ Binary instructions ] -------------------------------------------------

AddInst
	: "add" Type Value "," Value   << irx.NewAddInst($1, $2, $4) >>
;

MulInst
	: "mul" Type Value "," Value   << irx.NewMulInst($1, $2, $4) >>
;

// --- [ Bitwise instructions ] ------------------------------------------------

// --- [ Memory instructions ] -------------------------------------------------

LoadInst
	: "load" Type "," PointerType Value   << irx.NewLoadInst($1, $3, $4) >>
;

StoreInst
	: "store" Type Value "," PointerType Value   << irx.NewStoreInst($1, $2, $4, $5) >>
;

// --- [ Conversion instructions ] ---------------------------------------------

// --- [ Other instructions ] --------------------------------------------------

CallInst
	: "call" ResultType GlobalIdent "(" Args ")"   << irx.NewCallInst($1, $2, $4) >>
;

Args
	: empty
	| ArgList
;

ArgList
	: Arg               << irx.NewValueList($0) >>
	| ArgList "," Arg   << irx.AppendValue($0, $2) >>
;

Arg
	: Type Value   << irx.NewValue($0, $1) >>
;

// === [ Terminators ] =========================================================

Terminator
	: RetTerm
;

RetTerm
	: "ret" VoidType     << ir.NewRet(nil), nil >>
	| "ret" Type Value   << irx.NewRetTerm($1, $2) >>
;
