// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Conversion instructions ] =============================================
//
// References:
//    http://llvm.org/docs/LangRef.html#conversion-operations

package ir

import (
	"fmt"

	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

// --- [ trunc ] ---------------------------------------------------------------

// InstTrunc represents a truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#trunc-instruction
type InstTrunc struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewTrunc returns a new trunc instruction based on the given source value and target type.
func NewTrunc(from value.Value, to types.Type) *InstTrunc {
	return &InstTrunc{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstTrunc) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstTrunc) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstTrunc) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstTrunc) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = trunc %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstTrunc) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstTrunc) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the trunc instruction.
func (i *InstTrunc) From() value.Value {
	return i.from
}

// --- [ zext ] ----------------------------------------------------------------

// InstZExt represents a zero extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#zext-instruction
type InstZExt struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewZExt returns a new zext instruction based on the given source value and target type.
func NewZExt(from value.Value, to types.Type) *InstZExt {
	return &InstZExt{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstZExt) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstZExt) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstZExt) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstZExt) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = zext %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstZExt) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstZExt) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the zext instruction.
func (i *InstZExt) From() value.Value {
	return i.from
}

// --- [ sext ] ----------------------------------------------------------------

// InstSExt represents a sign extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sext-instruction
type InstSExt struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewSExt returns a new sext instruction based on the given source value and target type.
func NewSExt(from value.Value, to types.Type) *InstSExt {
	return &InstSExt{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstSExt) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstSExt) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstSExt) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstSExt) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = sext %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstSExt) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstSExt) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the sext instruction.
func (i *InstSExt) From() value.Value {
	return i.from
}

// --- [ fptrunc ] -------------------------------------------------------------

// InstFPTrunc represents a floating-point truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptrunc-instruction
type InstFPTrunc struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPTrunc returns a new fptrunc instruction based on the given source value and target type.
func NewFPTrunc(from value.Value, to types.Type) *InstFPTrunc {
	return &InstFPTrunc{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstFPTrunc) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstFPTrunc) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFPTrunc) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFPTrunc) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = fptrunc %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFPTrunc) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFPTrunc) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the fptrunc instruction.
func (i *InstFPTrunc) From() value.Value {
	return i.from
}

// --- [ fpext ] ---------------------------------------------------------------

// InstFPExt represents a floating-point extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fpext-instruction
type InstFPExt struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPExt returns a new fpext instruction based on the given source value and target type.
func NewFPExt(from value.Value, to types.Type) *InstFPExt {
	return &InstFPExt{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstFPExt) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstFPExt) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFPExt) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFPExt) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = fpext %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFPExt) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFPExt) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the fpext instruction.
func (i *InstFPExt) From() value.Value {
	return i.from
}

// --- [ fptoui ] --------------------------------------------------------------

// InstFPToUI represents a floating-point to unsigned integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptoui-instruction
type InstFPToUI struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPToUI returns a new fptoui instruction based on the given source value and target type.
func NewFPToUI(from value.Value, to types.Type) *InstFPToUI {
	return &InstFPToUI{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstFPToUI) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstFPToUI) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFPToUI) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFPToUI) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = fptoui %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFPToUI) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFPToUI) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the fptoui instruction.
func (i *InstFPToUI) From() value.Value {
	return i.from
}

// --- [ fptosi ] --------------------------------------------------------------

// InstFPToSI represents a floating-point to signed integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptosi-instruction
type InstFPToSI struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPToSI returns a new fptosi instruction based on the given source value and target type.
func NewFPToSI(from value.Value, to types.Type) *InstFPToSI {
	return &InstFPToSI{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstFPToSI) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstFPToSI) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFPToSI) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFPToSI) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = fptosi %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFPToSI) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFPToSI) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the fptosi instruction.
func (i *InstFPToSI) From() value.Value {
	return i.from
}

// --- [ uitofp ] --------------------------------------------------------------

// InstUIToFP represents an unsigned integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#uitofp-instruction
type InstUIToFP struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewUIToFP returns a new uitofp instruction based on the given source value and target type.
func NewUIToFP(from value.Value, to types.Type) *InstUIToFP {
	return &InstUIToFP{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstUIToFP) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstUIToFP) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstUIToFP) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstUIToFP) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = uitofp %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstUIToFP) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstUIToFP) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the uitofp instruction.
func (i *InstUIToFP) From() value.Value {
	return i.from
}

// --- [ sitofp ] --------------------------------------------------------------

// InstSIToFP represents a signed integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sitofp-instruction
type InstSIToFP struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewSIToFP returns a new sitofp instruction based on the given source value and target type.
func NewSIToFP(from value.Value, to types.Type) *InstSIToFP {
	return &InstSIToFP{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstSIToFP) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstSIToFP) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstSIToFP) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstSIToFP) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = sitofp %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstSIToFP) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstSIToFP) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the sitofp instruction.
func (i *InstSIToFP) From() value.Value {
	return i.from
}

// --- [ ptrtoint ] ------------------------------------------------------------

// InstPtrToInt represents a pointer to integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ptrtoint-instruction
type InstPtrToInt struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewPtrToInt returns a new ptrtoint instruction based on the given source value and target type.
func NewPtrToInt(from value.Value, to types.Type) *InstPtrToInt {
	return &InstPtrToInt{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstPtrToInt) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstPtrToInt) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstPtrToInt) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstPtrToInt) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = ptrtoint %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstPtrToInt) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstPtrToInt) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the ptrtoint instruction.
func (i *InstPtrToInt) From() value.Value {
	return i.from
}

// --- [ inttoptr ] ------------------------------------------------------------

// InstIntToPtr represents an integer to pointer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#inttoptr-instruction
type InstIntToPtr struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewIntToPtr returns a new inttoptr instruction based on the given source value and target type.
func NewIntToPtr(from value.Value, to types.Type) *InstIntToPtr {
	return &InstIntToPtr{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstIntToPtr) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstIntToPtr) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstIntToPtr) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstIntToPtr) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = inttoptr %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstIntToPtr) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstIntToPtr) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the inttoptr instruction.
func (i *InstIntToPtr) From() value.Value {
	return i.from
}

// --- [ bitcast ] -------------------------------------------------------------

// InstBitCast represents a bitcast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#bitcast-instruction
type InstBitCast struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewBitCast returns a new bitcast instruction based on the given source value and target type.
func NewBitCast(from value.Value, to types.Type) *InstBitCast {
	return &InstBitCast{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstBitCast) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstBitCast) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstBitCast) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstBitCast) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = bitcast %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstBitCast) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstBitCast) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the bitcast instruction.
func (i *InstBitCast) From() value.Value {
	return i.from
}

// --- [ addrspacecast ] -------------------------------------------------------

// InstAddrSpaceCast represents an address space cast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#addrspacecast-instruction
type InstAddrSpaceCast struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewAddrSpaceCast returns a new addrspacecast instruction based on the given source value and target type.
func NewAddrSpaceCast(from value.Value, to types.Type) *InstAddrSpaceCast {
	return &InstAddrSpaceCast{from: from, to: to}
}

// Type returns the type of the instruction.
func (i *InstAddrSpaceCast) Type() types.Type {
	return i.to
}

// Ident returns the identifier associated with the instruction.
func (i *InstAddrSpaceCast) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstAddrSpaceCast) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstAddrSpaceCast) LLVMString() string {
	from := i.From()
	return fmt.Sprintf("%s = addrspacecast %s %s to %s",
		i.Ident(),
		from.Type().LLVMString(),
		from.Ident(),
		i.Type().LLVMString())
}

// Parent returns the parent basic block of the instruction.
func (i *InstAddrSpaceCast) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstAddrSpaceCast) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// From returns the value before conversion of the addrspacecast instruction.
func (i *InstAddrSpaceCast) From() value.Value {
	return i.from
}
