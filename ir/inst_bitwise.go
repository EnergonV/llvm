// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Bitwise instructions ] ================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#bitwise-binary-operations

package ir

import (
	"fmt"

	"github.com/llir/llvm/ir/internal/enc"
	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

// --- [ shl ] -----------------------------------------------------------------

// InstShL represents a shift left instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#shl-instruction
type InstShL struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewShL returns a new shl instruction based on the given operands.
func NewShL(x, y value.Value) *InstShL {
	return &InstShL{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstShL) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstShL) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstShL) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstShL) LLVMString() string {
	return fmt.Sprintf("%s = shl %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstShL) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstShL) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the shl instruction.
func (i *InstShL) X() value.Value {
	return i.x
}

// Y returns the y operand of the shl instruction.
func (i *InstShL) Y() value.Value {
	return i.y
}

// --- [ lshr ] ----------------------------------------------------------------

// InstLShR represents a logical shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#lshr-instruction
type InstLShR struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewLShR returns a new lshr instruction based on the given operands.
func NewLShR(x, y value.Value) *InstLShR {
	return &InstLShR{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstLShR) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstLShR) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstLShR) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstLShR) LLVMString() string {
	return fmt.Sprintf("%s = lshr %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstLShR) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstLShR) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the lshr instruction.
func (i *InstLShR) X() value.Value {
	return i.x
}

// Y returns the y operand of the lshr instruction.
func (i *InstLShR) Y() value.Value {
	return i.y
}

// --- [ ashr ] ----------------------------------------------------------------

// InstAShR represents an arithmetic shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ashr-instruction
type InstAShR struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewAShR returns a new ashr instruction based on the given operands.
func NewAShR(x, y value.Value) *InstAShR {
	return &InstAShR{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstAShR) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstAShR) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstAShR) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstAShR) LLVMString() string {
	return fmt.Sprintf("%s = ashr %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstAShR) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstAShR) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the ashr instruction.
func (i *InstAShR) X() value.Value {
	return i.x
}

// Y returns the y operand of the ashr instruction.
func (i *InstAShR) Y() value.Value {
	return i.y
}

// --- [ and ] -----------------------------------------------------------------

// InstAnd represents an AND instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#and-instruction
type InstAnd struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewAnd returns a new and instruction based on the given operands.
func NewAnd(x, y value.Value) *InstAnd {
	return &InstAnd{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstAnd) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstAnd) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstAnd) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstAnd) LLVMString() string {
	return fmt.Sprintf("%s = and %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstAnd) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstAnd) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the and instruction.
func (i *InstAnd) X() value.Value {
	return i.x
}

// Y returns the y operand of the and instruction.
func (i *InstAnd) Y() value.Value {
	return i.y
}

// --- [ or ] ------------------------------------------------------------------

// InstOr represents an OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#or-instruction
type InstOr struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewOr returns a new or instruction based on the given operands.
func NewOr(x, y value.Value) *InstOr {
	return &InstOr{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstOr) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstOr) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstOr) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstOr) LLVMString() string {
	return fmt.Sprintf("%s = or %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstOr) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstOr) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the or instruction.
func (i *InstOr) X() value.Value {
	return i.x
}

// Y returns the y operand of the or instruction.
func (i *InstOr) Y() value.Value {
	return i.y
}

// --- [ xor ] -----------------------------------------------------------------

// InstXor represents an exclusive-OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#xor-instruction
type InstXor struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewXor returns a new xor instruction based on the given operands.
func NewXor(x, y value.Value) *InstXor {
	return &InstXor{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstXor) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstXor) Ident() string {
	return enc.Local(i.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstXor) SetIdent(ident string) {
	i.ident = ident
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstXor) LLVMString() string {
	return fmt.Sprintf("%s = xor %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstXor) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstXor) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the xor instruction.
func (i *InstXor) X() value.Value {
	return i.x
}

// Y returns the y operand of the xor instruction.
func (i *InstXor) Y() value.Value {
	return i.y
}
