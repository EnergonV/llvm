// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Bitwise instructions ] ================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#bitwise-binary-operations

package ir

import (
	"fmt"

	"github.com/llir/llvm/internal/enc"
	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

// --- [ shl ] -----------------------------------------------------------------

// InstShl represents a shift left instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#shl-instruction
type InstShl struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewShl returns a new shl instruction based on the given operands.
func NewShl(x, y value.Value) *InstShl {
	return &InstShl{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstShl) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstShl) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstShl) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstShl) String() string {
	return fmt.Sprintf("%s = shl %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstShl) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstShl) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the shl instruction.
func (inst *InstShl) X() value.Value {
	return inst.x
}

// Y returns the y operand of the shl instruction.
func (inst *InstShl) Y() value.Value {
	return inst.y
}

// --- [ lshr ] ----------------------------------------------------------------

// InstLShr represents a logical shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#lshr-instruction
type InstLShr struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewLShr returns a new lshr instruction based on the given operands.
func NewLShr(x, y value.Value) *InstLShr {
	return &InstLShr{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstLShr) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstLShr) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstLShr) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstLShr) String() string {
	return fmt.Sprintf("%s = lshr %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstLShr) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstLShr) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the lshr instruction.
func (inst *InstLShr) X() value.Value {
	return inst.x
}

// Y returns the y operand of the lshr instruction.
func (inst *InstLShr) Y() value.Value {
	return inst.y
}

// --- [ ashr ] ----------------------------------------------------------------

// InstAShr represents an arithmetic shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ashr-instruction
type InstAShr struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewAShr returns a new ashr instruction based on the given operands.
func NewAShr(x, y value.Value) *InstAShr {
	return &InstAShr{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstAShr) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstAShr) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstAShr) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstAShr) String() string {
	return fmt.Sprintf("%s = ashr %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstAShr) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstAShr) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the ashr instruction.
func (inst *InstAShr) X() value.Value {
	return inst.x
}

// Y returns the y operand of the ashr instruction.
func (inst *InstAShr) Y() value.Value {
	return inst.y
}

// --- [ and ] -----------------------------------------------------------------

// InstAnd represents an AND instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#and-instruction
type InstAnd struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewAnd returns a new and instruction based on the given operands.
func NewAnd(x, y value.Value) *InstAnd {
	return &InstAnd{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstAnd) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstAnd) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstAnd) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstAnd) String() string {
	return fmt.Sprintf("%s = and %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstAnd) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstAnd) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the and instruction.
func (inst *InstAnd) X() value.Value {
	return inst.x
}

// Y returns the y operand of the and instruction.
func (inst *InstAnd) Y() value.Value {
	return inst.y
}

// --- [ or ] ------------------------------------------------------------------

// InstOr represents an OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#or-instruction
type InstOr struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewOr returns a new or instruction based on the given operands.
func NewOr(x, y value.Value) *InstOr {
	return &InstOr{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstOr) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstOr) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstOr) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstOr) String() string {
	return fmt.Sprintf("%s = or %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstOr) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstOr) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the or instruction.
func (inst *InstOr) X() value.Value {
	return inst.x
}

// Y returns the y operand of the or instruction.
func (inst *InstOr) Y() value.Value {
	return inst.y
}

// --- [ xor ] -----------------------------------------------------------------

// InstXor represents an exclusive-OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#xor-instruction
type InstXor struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	ident string
	// Operands.
	x, y value.Value
}

// NewXor returns a new xor instruction based on the given operands.
func NewXor(x, y value.Value) *InstXor {
	return &InstXor{x: x, y: y}
}

// Type returns the type of the instruction.
func (inst *InstXor) Type() types.Type {
	return inst.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (inst *InstXor) Ident() string {
	return enc.Local(inst.ident)
}

// SetIdent sets the identifier associated with the instruction.
func (inst *InstXor) SetIdent(ident string) {
	inst.ident = ident
}

// String returns the LLVM syntax representation of the instruction.
func (inst *InstXor) String() string {
	return fmt.Sprintf("%s = xor %s %s, %s",
		inst.Ident(),
		inst.Type(),
		inst.x.Ident(),
		inst.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (inst *InstXor) Parent() *BasicBlock {
	return inst.parent
}

// SetParent sets the parent basic block of the instruction.
func (inst *InstXor) SetParent(parent *BasicBlock) {
	inst.parent = parent
}

// X returns the x operand of the xor instruction.
func (inst *InstXor) X() value.Value {
	return inst.x
}

// Y returns the y operand of the xor instruction.
func (inst *InstXor) Y() value.Value {
	return inst.y
}
