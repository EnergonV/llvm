// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Conversion instructions ] =============================================
//
// References:
//    http://llvm.org/docs/LangRef.html#conversion-operations

package instruction

import (
	"fmt"

	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

// --- [ trunc ] ---------------------------------------------------------------

// Trunc represents a truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#trunc-instruction
type Trunc struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewTrunc returns a new trunc instruction based on the given value and target type.
func NewTrunc(from value.Value, to types.Type) (*Trunc, error) {
	return &Trunc{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *Trunc) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *Trunc) String() string {
	return fmt.Sprintf("trunc %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ zext ] ----------------------------------------------------------------

// ZExt represents a zero extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#zext-instruction
type ZExt struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewZExt returns a new zext instruction based on the given value and target type.
func NewZExt(from value.Value, to types.Type) (*ZExt, error) {
	return &ZExt{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *ZExt) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *ZExt) String() string {
	return fmt.Sprintf("zext %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ sext ] ----------------------------------------------------------------

// SExt represents a sign extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sext-instruction
type SExt struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewSExt returns a new sext instruction based on the given value and target type.
func NewSExt(from value.Value, to types.Type) (*SExt, error) {
	return &SExt{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *SExt) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *SExt) String() string {
	return fmt.Sprintf("sext %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ fptrunc ] -------------------------------------------------------------

// FPTrunc represents a floating-point truncation instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptrunc-instruction
type FPTrunc struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPTrunc returns a new fptrunc instruction based on the given value and target type.
func NewFPTrunc(from value.Value, to types.Type) (*FPTrunc, error) {
	return &FPTrunc{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *FPTrunc) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *FPTrunc) String() string {
	return fmt.Sprintf("fptrunc %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ fpext ] ---------------------------------------------------------------

// FPExt represents a floating-point extension instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fpext-instruction
type FPExt struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPExt returns a new fpext instruction based on the given value and target type.
func NewFPExt(from value.Value, to types.Type) (*FPExt, error) {
	return &FPExt{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *FPExt) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *FPExt) String() string {
	return fmt.Sprintf("fpext %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ fptoui ] --------------------------------------------------------------

// FPToUI represents a floating-point to unsigned integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptoui-instruction
type FPToUI struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPToUI returns a new fptoui instruction based on the given value and target type.
func NewFPToUI(from value.Value, to types.Type) (*FPToUI, error) {
	return &FPToUI{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *FPToUI) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *FPToUI) String() string {
	return fmt.Sprintf("fptoui %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ fptosi ] --------------------------------------------------------------

// FPToSI represents a floating-point to signed integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fptosi-instruction
type FPToSI struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewFPToSI returns a new fptosi instruction based on the given value and target type.
func NewFPToSI(from value.Value, to types.Type) (*FPToSI, error) {
	return &FPToSI{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *FPToSI) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *FPToSI) String() string {
	return fmt.Sprintf("fptosi %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ uitofp ] --------------------------------------------------------------

// UIToFP represents an unsigned integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#uitofp-instruction
type UIToFP struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewUIToFP returns a new uitofp instruction based on the given value and target type.
func NewUIToFP(from value.Value, to types.Type) (*UIToFP, error) {
	return &UIToFP{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *UIToFP) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *UIToFP) String() string {
	return fmt.Sprintf("uitofp %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ sitofp ] --------------------------------------------------------------

// SIToFP represents a signed integer to floating-point conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sitofp-instruction
type SIToFP struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewSIToFP returns a new sitofp instruction based on the given value and target type.
func NewSIToFP(from value.Value, to types.Type) (*SIToFP, error) {
	return &SIToFP{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *SIToFP) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *SIToFP) String() string {
	return fmt.Sprintf("sitofp %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ ptrtoint ] ------------------------------------------------------------

// PtrToInt represents a pointer to integer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ptrtoint-instruction
type PtrToInt struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewPtrToInt returns a new ptrtoint instruction based on the given value and target type.
func NewPtrToInt(from value.Value, to types.Type) (*PtrToInt, error) {
	return &PtrToInt{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *PtrToInt) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *PtrToInt) String() string {
	return fmt.Sprintf("ptrtoint %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ inttoptr ] ------------------------------------------------------------

// IntToPtr represents an integer to pointer conversion instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#inttoptr-instruction
type IntToPtr struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewIntToPtr returns a new inttoptr instruction based on the given value and target type.
func NewIntToPtr(from value.Value, to types.Type) (*IntToPtr, error) {
	return &IntToPtr{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *IntToPtr) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *IntToPtr) String() string {
	return fmt.Sprintf("inttoptr %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ bitcast ] -------------------------------------------------------------

// BitCast represents a bitcast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#bitcast-instruction
type BitCast struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewBitCast returns a new bitcast instruction based on the given value and target type.
func NewBitCast(from value.Value, to types.Type) (*BitCast, error) {
	return &BitCast{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *BitCast) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *BitCast) String() string {
	return fmt.Sprintf("bitcast %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}

// --- [ addrspacecast ] -------------------------------------------------------

// AddrSpaceCast represents an address space cast instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#addrspacecast-instruction
type AddrSpaceCast struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type
}

// NewAddrSpaceCast returns a new addrspacecast instruction based on the given value and target type.
func NewAddrSpaceCast(from value.Value, to types.Type) (*AddrSpaceCast, error) {
	return &AddrSpaceCast{from: from, to: to}, nil
}

// RetType returns the type of the value produced by the instruction.
func (inst *AddrSpaceCast) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *AddrSpaceCast) String() string {
	return fmt.Sprintf("addrspacecast %v %v to %v", inst.from.Type(), value.String(inst.from), inst.to)
}
