// generated by gen.go using 'go generate'; DO NOT EDIT.

// {{ h1 .Desc }}
//
// References:
//    {{ .URL }}

package ir

import (
	"fmt"

	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

{{- range .Insts }}
// {{ lower .Name | h2 }}

// Inst{{ .Name }} represents {{ .Desc }} instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#{{ lower .Name }}-instruction
type Inst{{ .Name }} struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// New{{ .Name }} returns a new {{ lower .Name }} instruction based on the given operands.
func New{{ .Name }}(x, y value.Value) *Inst{{ .Name }} {
	return &Inst{{ .Name }}{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *Inst{{ .Name }}) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *Inst{{ .Name }}) Ident() string {
	return local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *Inst{{ .Name }}) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *Inst{{ .Name }}) LLVMString() string {
	return fmt.Sprintf("%s = {{ lower .Name }} %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// X returns the x operand of the {{ lower .Name }} instruction.
func (inst *Inst{{ .Name }}) X() value.Value {
	return inst.x
}

// Y returns the y operand of the {{ lower .Name }} instruction.
func (inst *Inst{{ .Name }}) Y() value.Value {
	return inst.y
}

// Parent returns the parent basic block of the instruction.
func (i *Inst{{ .Name }}) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *Inst{{ .Name }}) SetParent(parent *BasicBlock) {
	i.parent = parent
}
{{- end }}
