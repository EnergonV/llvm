// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Binary instructions ] =================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#binary-operations

package ir

import (
	"fmt"

	"github.com/llir/llvm/ir/internal/enc"
	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

// --- [ add ] -----------------------------------------------------------------

// InstAdd represents an addition instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#add-instruction
type InstAdd struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewAdd returns a new add instruction based on the given operands.
func NewAdd(x, y value.Value) *InstAdd {
	return &InstAdd{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstAdd) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstAdd) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstAdd) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstAdd) LLVMString() string {
	return fmt.Sprintf("%s = add %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstAdd) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstAdd) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the add instruction.
func (i *InstAdd) X() value.Value {
	return i.x
}

// Y returns the y operand of the add instruction.
func (i *InstAdd) Y() value.Value {
	return i.y
}

// --- [ fadd ] ----------------------------------------------------------------

// InstFAdd represents a floating-point addition instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fadd-instruction
type InstFAdd struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewFAdd returns a new fadd instruction based on the given operands.
func NewFAdd(x, y value.Value) *InstFAdd {
	return &InstFAdd{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstFAdd) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstFAdd) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFAdd) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFAdd) LLVMString() string {
	return fmt.Sprintf("%s = fadd %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFAdd) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFAdd) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the fadd instruction.
func (i *InstFAdd) X() value.Value {
	return i.x
}

// Y returns the y operand of the fadd instruction.
func (i *InstFAdd) Y() value.Value {
	return i.y
}

// --- [ sub ] -----------------------------------------------------------------

// InstSub represents a subtraction instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sub-instruction
type InstSub struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewSub returns a new sub instruction based on the given operands.
func NewSub(x, y value.Value) *InstSub {
	return &InstSub{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstSub) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstSub) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstSub) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstSub) LLVMString() string {
	return fmt.Sprintf("%s = sub %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstSub) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstSub) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the sub instruction.
func (i *InstSub) X() value.Value {
	return i.x
}

// Y returns the y operand of the sub instruction.
func (i *InstSub) Y() value.Value {
	return i.y
}

// --- [ fsub ] ----------------------------------------------------------------

// InstFSub represents a floating-point subtraction instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fsub-instruction
type InstFSub struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewFSub returns a new fsub instruction based on the given operands.
func NewFSub(x, y value.Value) *InstFSub {
	return &InstFSub{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstFSub) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstFSub) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFSub) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFSub) LLVMString() string {
	return fmt.Sprintf("%s = fsub %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFSub) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFSub) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the fsub instruction.
func (i *InstFSub) X() value.Value {
	return i.x
}

// Y returns the y operand of the fsub instruction.
func (i *InstFSub) Y() value.Value {
	return i.y
}

// --- [ mul ] -----------------------------------------------------------------

// InstMul represents a multiplication instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#mul-instruction
type InstMul struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewMul returns a new mul instruction based on the given operands.
func NewMul(x, y value.Value) *InstMul {
	return &InstMul{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstMul) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstMul) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstMul) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstMul) LLVMString() string {
	return fmt.Sprintf("%s = mul %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstMul) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstMul) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the mul instruction.
func (i *InstMul) X() value.Value {
	return i.x
}

// Y returns the y operand of the mul instruction.
func (i *InstMul) Y() value.Value {
	return i.y
}

// --- [ fmul ] ----------------------------------------------------------------

// InstFMul represents a floating-point multiplication instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fmul-instruction
type InstFMul struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewFMul returns a new fmul instruction based on the given operands.
func NewFMul(x, y value.Value) *InstFMul {
	return &InstFMul{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstFMul) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstFMul) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFMul) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFMul) LLVMString() string {
	return fmt.Sprintf("%s = fmul %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFMul) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFMul) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the fmul instruction.
func (i *InstFMul) X() value.Value {
	return i.x
}

// Y returns the y operand of the fmul instruction.
func (i *InstFMul) Y() value.Value {
	return i.y
}

// --- [ udiv ] ----------------------------------------------------------------

// InstUDiv represents an unsigned division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#udiv-instruction
type InstUDiv struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewUDiv returns a new udiv instruction based on the given operands.
func NewUDiv(x, y value.Value) *InstUDiv {
	return &InstUDiv{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstUDiv) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstUDiv) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstUDiv) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstUDiv) LLVMString() string {
	return fmt.Sprintf("%s = udiv %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstUDiv) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstUDiv) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the udiv instruction.
func (i *InstUDiv) X() value.Value {
	return i.x
}

// Y returns the y operand of the udiv instruction.
func (i *InstUDiv) Y() value.Value {
	return i.y
}

// --- [ sdiv ] ----------------------------------------------------------------

// InstSDiv represents a signed division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#sdiv-instruction
type InstSDiv struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewSDiv returns a new sdiv instruction based on the given operands.
func NewSDiv(x, y value.Value) *InstSDiv {
	return &InstSDiv{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstSDiv) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstSDiv) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstSDiv) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstSDiv) LLVMString() string {
	return fmt.Sprintf("%s = sdiv %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstSDiv) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstSDiv) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the sdiv instruction.
func (i *InstSDiv) X() value.Value {
	return i.x
}

// Y returns the y operand of the sdiv instruction.
func (i *InstSDiv) Y() value.Value {
	return i.y
}

// --- [ fdiv ] ----------------------------------------------------------------

// InstFDiv represents a floating-point division instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#fdiv-instruction
type InstFDiv struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewFDiv returns a new fdiv instruction based on the given operands.
func NewFDiv(x, y value.Value) *InstFDiv {
	return &InstFDiv{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstFDiv) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstFDiv) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFDiv) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFDiv) LLVMString() string {
	return fmt.Sprintf("%s = fdiv %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFDiv) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFDiv) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the fdiv instruction.
func (i *InstFDiv) X() value.Value {
	return i.x
}

// Y returns the y operand of the fdiv instruction.
func (i *InstFDiv) Y() value.Value {
	return i.y
}

// --- [ urem ] ----------------------------------------------------------------

// InstURem represents an unsigned remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#urem-instruction
type InstURem struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewURem returns a new urem instruction based on the given operands.
func NewURem(x, y value.Value) *InstURem {
	return &InstURem{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstURem) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstURem) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstURem) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstURem) LLVMString() string {
	return fmt.Sprintf("%s = urem %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstURem) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstURem) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the urem instruction.
func (i *InstURem) X() value.Value {
	return i.x
}

// Y returns the y operand of the urem instruction.
func (i *InstURem) Y() value.Value {
	return i.y
}

// --- [ srem ] ----------------------------------------------------------------

// InstSRem represents a signed remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#srem-instruction
type InstSRem struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewSRem returns a new srem instruction based on the given operands.
func NewSRem(x, y value.Value) *InstSRem {
	return &InstSRem{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstSRem) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstSRem) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstSRem) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstSRem) LLVMString() string {
	return fmt.Sprintf("%s = srem %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstSRem) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstSRem) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the srem instruction.
func (i *InstSRem) X() value.Value {
	return i.x
}

// Y returns the y operand of the srem instruction.
func (i *InstSRem) Y() value.Value {
	return i.y
}

// --- [ frem ] ----------------------------------------------------------------

// InstFRem represents a floating-point remainder instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#frem-instruction
type InstFRem struct {
	// Parent basic block.
	parent *BasicBlock
	// Identifier associated with the instruction.
	id string
	// Operands.
	x, y value.Value
}

// NewFRem returns a new frem instruction based on the given operands.
func NewFRem(x, y value.Value) *InstFRem {
	return &InstFRem{x: x, y: y}
}

// Type returns the type of the instruction.
func (i *InstFRem) Type() types.Type {
	return i.x.Type()
}

// Ident returns the identifier associated with the instruction.
func (i *InstFRem) Ident() string {
	return enc.Local(i.id)
}

// SetIdent sets the identifier associated with the instruction.
func (i *InstFRem) SetIdent(id string) {
	i.id = id
}

// LLVMString returns the LLVM syntax representation of the instruction.
func (i *InstFRem) LLVMString() string {
	return fmt.Sprintf("%s = frem %s %s, %s",
		i.Ident(),
		i.Type().LLVMString(),
		i.x.Ident(),
		i.y.Ident())
}

// Parent returns the parent basic block of the instruction.
func (i *InstFRem) Parent() *BasicBlock {
	return i.parent
}

// SetParent sets the parent basic block of the instruction.
func (i *InstFRem) SetParent(parent *BasicBlock) {
	i.parent = parent
}

// X returns the x operand of the frem instruction.
func (i *InstFRem) X() value.Value {
	return i.x
}

// Y returns the y operand of the frem instruction.
func (i *InstFRem) Y() value.Value {
	return i.y
}
