target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
@p = global i32 0
@s = global [80 x i8] zeroinitializer
@zero = global i32 0
@nine = global i32 0
@plus = global i32 0
@minus = global i32 0
@times = global i32 0
@div = global i32 0
@lpar = global i32 0
@rpar = global i32 0
@bad_expression = global [15 x i8] zeroinitializer
@cr = global [2 x i8] zeroinitializer
@bad_number = global [11 x i8] zeroinitializer
@test_data = global [21 x i8] zeroinitializer
define i32 @isNumber(i8 %c) {
0:
	%1 = alloca i8
	store i8 %c, i8* %1
	%2 = load i32, i32* @p
	%3 = sext i32 %2 to i64
	%4 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %3
	%5 = load i8, i8* %4
	%6 = sext i8 %5 to i32
	%7 = load i32, i32* @zero
	%8 = icmp sge i32 %6, %7
	br i1 %8, label %9, label %17
9:
	%10 = load i32, i32* @p
	%11 = sext i32 %10 to i64
	%12 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %11
	%13 = load i8, i8* %12
	%14 = sext i8 %13 to i32
	%15 = load i32, i32* @nine
	%16 = icmp sle i32 %14, %15
	br label %17
17:
	%18 = phi i1 [ false, %0 ], [ %16, %9 ]
	%19 = zext i1 %18 to i32
	ret i32 %19
}
define i32 @expr(i32 %l) {
0:
	%1 = alloca i32
	%2 = alloca i32
	%a = alloca i32
	%b = alloca i32
	store i32 %l, i32* %2
	%3 = load i32, i32* %2
	%4 = icmp eq i32 %3, 0
	br i1 %4, label %5, label %51
5:
	%6 = call i32 @expr(i32 1)
	store i32 %6, i32* %a
	br label %7
7:
	%8 = load i32, i32* @p
	%9 = sext i32 %8 to i64
	%10 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %9
	%11 = load i8, i8* %10
	%12 = sext i8 %11 to i32
	%13 = load i32, i32* @plus
	%14 = icmp ne i32 %12, %13
	br i1 %14, label %15, label %23
15:
	%16 = load i32, i32* @p
	%17 = sext i32 %16 to i64
	%18 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %17
	%19 = load i8, i8* %18
	%20 = sext i8 %19 to i32
	%21 = load i32, i32* @minus
	%22 = icmp ne i32 %20, %21
	br label %23
23:
	%24 = phi i1 [ false, %7 ], [ %22, %15 ]
	%25 = xor i1 %24, true
	br i1 %25, label %26, label %49
26:
	%27 = load i32, i32* @p
	%28 = sext i32 %27 to i64
	%29 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %28
	%30 = load i8, i8* %29
	%31 = sext i8 %30 to i32
	%32 = load i32, i32* @plus
	%33 = icmp eq i32 %31, %32
	br i1 %33, label %34, label %41
34:
	%35 = load i32, i32* @p
	%36 = add i32 %35, 1
	store i32 %36, i32* @p
	%37 = call i32 @expr(i32 1)
	store i32 %37, i32* %b
	%38 = load i32, i32* %a
	%39 = load i32, i32* %b
	%40 = add i32 %38, %39
	store i32 %40, i32* %a
	br label %48
41:
	%42 = load i32, i32* @p
	%43 = add i32 %42, 1
	store i32 %43, i32* @p
	%44 = call i32 @expr(i32 1)
	store i32 %44, i32* %b
	%45 = load i32, i32* %a
	%46 = load i32, i32* %b
	%47 = sub i32 %45, %46
	store i32 %47, i32* %a
	br label %48
48:
	br label %7
49:
	%50 = load i32, i32* %a
	store i32 %50, i32* %1
	br label %160
51:
	%52 = load i32, i32* %2
	%53 = icmp eq i32 %52, 1
	br i1 %53, label %54, label %100
54:
	%55 = call i32 @expr(i32 2)
	store i32 %55, i32* %a
	br label %56
56:
	%57 = load i32, i32* @p
	%58 = sext i32 %57 to i64
	%59 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %58
	%60 = load i8, i8* %59
	%61 = sext i8 %60 to i32
	%62 = load i32, i32* @times
	%63 = icmp ne i32 %61, %62
	br i1 %63, label %64, label %72
64:
	%65 = load i32, i32* @p
	%66 = sext i32 %65 to i64
	%67 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %66
	%68 = load i8, i8* %67
	%69 = sext i8 %68 to i32
	%70 = load i32, i32* @div
	%71 = icmp ne i32 %69, %70
	br label %72
72:
	%73 = phi i1 [ false, %56 ], [ %71, %64 ]
	%74 = xor i1 %73, true
	br i1 %74, label %75, label %98
75:
	%76 = load i32, i32* @p
	%77 = sext i32 %76 to i64
	%78 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %77
	%79 = load i8, i8* %78
	%80 = sext i8 %79 to i32
	%81 = load i32, i32* @times
	%82 = icmp eq i32 %80, %81
	br i1 %82, label %83, label %90
83:
	%84 = load i32, i32* @p
	%85 = add i32 %84, 1
	store i32 %85, i32* @p
	%86 = call i32 @expr(i32 2)
	store i32 %86, i32* %b
	%87 = load i32, i32* %a
	%88 = load i32, i32* %b
	%89 = mul i32 %87, %88
	store i32 %89, i32* %a
	br label %97
90:
	%91 = load i32, i32* @p
	%92 = add i32 %91, 1
	store i32 %92, i32* @p
	%93 = call i32 @expr(i32 2)
	store i32 %93, i32* %b
	%94 = load i32, i32* %a
	%95 = load i32, i32* %b
	%96 = sdiv i32 %94, %95
	store i32 %96, i32* %a
	br label %97
97:
	br label %56
98:
	%99 = load i32, i32* %a
	store i32 %99, i32* %1
	br label %160
100:
	%101 = load i32, i32* %2
	%102 = icmp eq i32 %101, 2
	br i1 %102, label %103, label %158
103:
	%104 = load i32, i32* @p
	%105 = sext i32 %104 to i64
	%106 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %105
	%107 = load i8, i8* %106
	%108 = sext i8 %107 to i32
	%109 = load i32, i32* @lpar
	%110 = icmp eq i32 %108, %109
	br i1 %110, label %111, label %127
111:
	%112 = load i32, i32* @p
	%113 = add i32 %112, 1
	store i32 %113, i32* @p
	%114 = call i32 @expr(i32 0)
	store i32 %114, i32* %a
	%115 = load i32, i32* @p
	%116 = sext i32 %115 to i64
	%117 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %116
	%118 = load i8, i8* %117
	%119 = sext i8 %118 to i32
	%120 = load i32, i32* @rpar
	%121 = icmp ne i32 %119, %120
	br i1 %121, label %122, label %123
122:
	call void @putstring(i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i32 0))
	call void @putstring(i8* getelementptr ([2 x i8], [2 x i8]* @cr, i32 0, i32 0))
	br label %123
123:
	%124 = load i32, i32* @p
	%125 = add i32 %124, 1
	store i32 %125, i32* @p
	%126 = load i32, i32* %a
	store i32 %126, i32* %1
	br label %160
127:
	%128 = load i32, i32* @p
	%129 = sext i32 %128 to i64
	%130 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %129
	%131 = load i8, i8* %130
	%132 = call i32 @isNumber(i8 %131)
	%133 = icmp ne i32 %132, 0
	br i1 %133, label %135, label %134
134:
	call void @putstring(i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i32 0))
	call void @putstring(i8* getelementptr ([2 x i8], [2 x i8]* @cr, i32 0, i32 0))
	store i32 0, i32* %1
	br label %160
135:
	store i32 0, i32* %a
	br label %136
136:
	%137 = load i32, i32* @p
	%138 = sext i32 %137 to i64
	%139 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %138
	%140 = load i8, i8* %139
	%141 = call i32 @isNumber(i8 %140)
	%142 = icmp ne i32 %141, 0
	br i1 %142, label %143, label %156
143:
	%144 = load i32, i32* %a
	%145 = mul i32 %144, 10
	%146 = load i32, i32* @p
	%147 = sext i32 %146 to i64
	%148 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %147
	%149 = load i8, i8* %148
	%150 = sext i8 %149 to i32
	%151 = load i32, i32* @zero
	%152 = sub i32 %150, %151
	%153 = add i32 %145, %152
	store i32 %153, i32* %a
	%154 = load i32, i32* @p
	%155 = add i32 %154, 1
	store i32 %155, i32* @p
	br label %136
156:
	%157 = load i32, i32* %a
	store i32 %157, i32* %1
	br label %160
158:
	br label %159
159:
	br label %160
160:
	%161 = load i32, i32* %1
	ret i32 %161
}
declare void @putstring(i8*)
define i32 @main() {
0:
	%1 = alloca i32
	store i32 0, i32* %1
	store i32 48, i32* @zero
	store i32 57, i32* @nine
	store i32 43, i32* @plus
	store i32 45, i32* @minus
	store i32 42, i32* @times
	store i32 47, i32* @div
	store i32 40, i32* @lpar
	store i32 41, i32* @rpar
	store i8 66, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 0)
	store i8 97, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 1)
	store i8 100, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 2)
	store i8 32, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 3)
	store i8 110, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 4)
	store i8 117, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 5)
	store i8 109, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 6)
	store i8 98, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 7)
	store i8 101, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 8)
	store i8 114, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 9)
	store i8 0, i8* getelementptr ([11 x i8], [11 x i8]* @bad_number, i32 0, i64 10)
	store i8 66, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 0)
	store i8 97, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 1)
	store i8 100, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 2)
	store i8 32, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 3)
	store i8 101, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 4)
	store i8 120, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 5)
	store i8 112, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 6)
	store i8 114, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 7)
	store i8 101, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 8)
	store i8 115, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 9)
	store i8 115, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 10)
	store i8 105, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 11)
	store i8 111, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 12)
	store i8 110, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 13)
	store i8 0, i8* getelementptr ([15 x i8], [15 x i8]* @bad_expression, i32 0, i64 14)
	store i8 10, i8* getelementptr ([2 x i8], [2 x i8]* @cr, i32 0, i64 0)
	store i8 0, i8* getelementptr ([2 x i8], [2 x i8]* @cr, i32 0, i64 1)
	store i8 40, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 0)
	store i8 49, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 1)
	store i8 50, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 2)
	store i8 45, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 3)
	store i8 52, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 4)
	store i8 41, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 5)
	store i8 43, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 6)
	store i8 40, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 7)
	store i8 57, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 8)
	store i8 57, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 9)
	store i8 45, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 10)
	store i8 49, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 11)
	store i8 49, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 12)
	store i8 43, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 13)
	store i8 49, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 14)
	store i8 54, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 15)
	store i8 41, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 16)
	store i8 42, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 17)
	store i8 49, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 18)
	store i8 57, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 19)
	store i8 0, i8* getelementptr ([21 x i8], [21 x i8]* @test_data, i32 0, i64 20)
	call void @getstring(i8* getelementptr ([80 x i8], [80 x i8]* @s, i32 0, i32 0))
	%2 = load i8, i8* getelementptr ([80 x i8], [80 x i8]* @s, i32 0, i64 0)
	%3 = sext i8 %2 to i32
	%4 = icmp eq i32 %3, 116
	br i1 %4, label %5, label %27
5:
	store i32 0, i32* @p
	br label %6
6:
	%7 = load i32, i32* @p
	%8 = sext i32 %7 to i64
	%9 = getelementptr [21 x i8], [21 x i8]* @test_data, i32 0, i64 %8
	%10 = load i8, i8* %9
	%11 = sext i8 %10 to i32
	%12 = icmp ne i32 %11, 0
	br i1 %12, label %13, label %23
13:
	%14 = load i32, i32* @p
	%15 = sext i32 %14 to i64
	%16 = getelementptr [21 x i8], [21 x i8]* @test_data, i32 0, i64 %15
	%17 = load i8, i8* %16
	%18 = load i32, i32* @p
	%19 = sext i32 %18 to i64
	%20 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %19
	store i8 %17, i8* %20
	%21 = load i32, i32* @p
	%22 = add i32 %21, 1
	store i32 %22, i32* @p
	br label %6
23:
	%24 = load i32, i32* @p
	%25 = sext i32 %24 to i64
	%26 = getelementptr [80 x i8], [80 x i8]* @s, i32 0, i64 %25
	store i8 0, i8* %26
	br label %27
27:
	store i32 0, i32* @p
	%28 = call i32 @expr(i32 0)
	call void @putint(i32 %28)
	call void @putstring(i8* getelementptr ([2 x i8], [2 x i8]* @cr, i32 0, i32 0))
	%29 = load i32, i32* %1
	ret i32 %29
}
declare void @getstring(i8*)
declare void @putint(i32)
