// generated by gen.go using 'go generate'; DO NOT EDIT.

// {{ h1 .Desc }}
//
// References:
//    {{ .URL }}

package instruction

import (
	"fmt"

	"github.com/llir/llvm/ir/types"
	"github.com/llir/llvm/ir/value"
)

{{- range .Insts }}
// {{ lower .Name | h2 }}

// {{ .Name }} represents {{ .Desc }} instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#{{ lower .Name }}-instruction
type {{ .Name }} struct {
	// Value before conversion.
	from value.Value
	// Type after conversion.
	to types.Type

}

// New{{ .Name }} returns a new {{ lower .Name }} instruction based on the given value and target type.
func New{{ .Name }}(from value.Value, to types.Type) (*{{ .Name }}, error) {
	return &{{ .Name }}{from: from, to: to}, nil
}

// From returns the value before conversion of the {{ lower .Name }} instruction.
func (inst *{{ .Name }}) From() value.Value {
	return inst.from
}

// RetType returns the type of the value produced by the instruction.
func (inst *{{ .Name }}) RetType() types.Type {
	return inst.to
}

// String returns the string representation of the instruction.
func (inst *{{ .Name }}) String() string {
	from := inst.From()
	return fmt.Sprintf("{{ lower .Name }} %v %v to %v", from.Type(), from.ValueString(), inst.RetType())
}
{{- end }}
